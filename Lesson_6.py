
# ЗАДАНИЕ 1:
# Дан список: ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']
# Необходимо его обработать — обособить каждое целое число (вещественные не трогаем) кавычками
# (добавить кавычку до и кавычку после элемента списка, являющегося числом) и дополнить нулём до двух целочисленных разрядов:
# ['в', '"', '05', '"', 'часов', '"', '17', '"', 'минут', 'температура', 'воздуха', 'была', '"', '+05', '"', 'градусов']
# Сформировать из обработанного списка строку:
# в "05" часов "17" минут температура воздуха была "+05" градусов
# Подумать, какое условие записать, чтобы выявить числа среди элементов списка?
# Как модифицировать это условие для чисел со знаком?
# Примечание: если обособление чисел кавычками не будет получаться - можете вернуться к его реализации позже.
# Главное: дополнить числа до двух разрядов нулём!

def Exp1(list = ['в', '5', 'часов', '17', 'минут', 'температура', 'воздуха', 'была', '+5', 'градусов']):
    for i, key in  enumerate(list):
        cnt_num = 0
        num = ""
        txt = ""
        txt_2 = ""
        for ii, k in enumerate(key):
            if k.isdigit():
                num = k if ii == 0 else num + k
                cnt_num += 1
            elif k in ["+", "-"]:
                txt = k
            else:
                txt_2 = k if ii == 0 else txt_2 + k
        if cnt_num != 0:
            if cnt_num > 1:
                list[i] = "\"{}{}\"".format(txt, num)
            if cnt_num == 1:
                num = "0" + num
                list[i] = "\"{}{}\"".format(txt, num)
        else:
            list[i] = txt_2
    return  " ".join(list)
#print(Exp1())


#Задача 2
# 1.*(вместо задачи 2) Решить задачу 2 не создавая новый список (как говорят, in place).
#   Эта задача намного серьёзнее, чем может сначала показаться.
# 2. Дан список, содержащий искажённые данные с должностями и именами сотрудников:
#   ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']
#   Известно, что имя сотрудника всегда в конце строки. Сформировать и вывести на экран фразы вида:
#   'Привет, Игорь!'
#   Подумать, как получить имена сотрудников из элементов списка, как привести их к корректному виду.
#   Можно ли при этом не создавать новый список?
def Exp2(list = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']):
    [print(f"Привет, {i.split(' ')[-1].title()}!") for i in list]
#Exp2()


#Задача 3
# 5. Создать список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
# Вывести на экран эти цены через запятую в одну строку,
# цена должна отображаться в виде <r> руб <kk> коп (например «5 руб 04 коп»).
# Подумать, как из цены получить рубли и копейки, как добавить нули, если, например,
# получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
# Вывести цены, отсортированные по возрастанию, новый список не создавать
#   (доказать, что объект списка после сортировки остался тот же).
# Создать новый список, содержащий те же цены, но отсортированные по убыванию.
# Вывести цены пяти самых дорогих товаров.
# Сможете ли вывести цены этих товаров по возрастанию, написав минимум кода?
def print_price(list, type_sort = 0, top_N = 0):
    list.sort() if type_sort == 1 else list
    prices = ""
    for i, key in enumerate(list):
        num = ""
        for ii, k in enumerate(str(key).split('.')): #[list_.split(".") if len(list_.split(".")) > 1 else list_])
            k = k if len(k) > 1 else "0" + k
            num = k if ii == 0 else num + "." + k
        num = num if "." in num else num + ".00"
        num = "{} руб {} коп".format(num.split('.')[0], num.split('.')[1])
        prices = num + "," if i == 0 else prices + num + ","
    print(prices[:-1] if type_sort != 1 else prices[:-1] + f" их сумма {sum(list)}")

def Exp3 (list = [57.8, 46.51, 97, 404.34, 500, 23.09]):
    print(f"Входной список цен: {list} \nИх сумма равна: {sum(list)}\n" )
    print("*-"*40)

    print("Вывод цен в строку: ")
    print_price(list)
    print("*-" * 40,"\n")

    print("Вывод отсортированных цен: ")
    print_price(list, 1)
    print("*-" * 40, "\n")

    print("Вывод отсортированных цен по убыванию из нового списка: ")
    list_new = sorted(list, reverse=True)
    print_price(list_new, 0)
    print("*-" * 40, "\n")

    print("Вывод 5 самых дорогих товаров по возрастанию: ")
    print_price(sorted(list_new[:4]), 0)
    print("*-" * 40, "\n")
#Exp3()

